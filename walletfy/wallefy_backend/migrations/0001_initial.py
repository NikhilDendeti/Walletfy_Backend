# Generated by Django 4.2.16 on 2024-10-21 09:38

import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Location',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('city_name', models.CharField(choices=[('Hyderabad', 'HYDERABAD')], max_length=50, unique=True)),
            ],
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('groups', models.ManyToManyField(blank=True, related_name='wallefy_backend_user_groups', to='auth.group')),
                ('user_permissions', models.ManyToManyField(blank=True, related_name='wallefy_backend_user_permissions', to='auth.permission')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='UserRole',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('role', models.CharField(choices=[('Student', 'STUDENT'), ('Employee', 'EMPLOYEE')], max_length=10)),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='wallefy_backend.user')),
            ],
        ),
        migrations.CreateModel(
            name='UserProfile',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('gender', models.CharField(choices=[('Male', 'MALE'), ('Female', 'FEMALE'), ('Other', 'OTHER')], max_length=10)),
                ('role', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='wallefy_backend.userrole')),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='wallefy_backend.user')),
            ],
        ),
        migrations.CreateModel(
            name='UserPreferenceDetails',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('month', models.DateField(auto_now=True)),
                ('preference', models.CharField(choices=[('High', 'HIGH'), ('Medium', 'MEDIUM'), ('Low', 'LOW')], max_length=150)),
                ('location', models.CharField(choices=[('Alwal', 'ALWAL'), ('Amberpet', 'AMBERPET'), ('Ameerpet', 'AMEERPET'), ('Attapur', 'ATTAPUR'), ('Bachupally', 'BACHUPALLY'), ('Banjara Hills', 'BANJARA_HILLS'), ('Begumpet', 'BEGUMPET'), ('Charminar', 'CHARMINAR'), ('Dilsukhnagar', 'DILSUKHNAGAR'), ('ECIL', 'ECIL'), ('Gachibowli', 'GACHIBOWLI'), ('Hafiz Baba Nagar', 'HAFIZ_BABA_NAGAR'), ('Hayath Nagar', 'HAYATH_NAGAR'), ('Himayatnagar', 'HIMAYATNAGAR'), ('Jeedimetla', 'JEEDIMETLA'), ('JNTU', 'JNTU'), ('Karkhana', 'KARKHANA'), ('Kompally', 'KOMPALLY'), ('Kondapur', 'KONDAPUR'), ('Kukatpally', 'KUKATPALLY'), ('LB Nagar', 'LB_NAGAR'), ('Madhapur', 'MADHAPUR'), ('Malakpet', 'MALAKPET'), ('Manikonda', 'MANIKONDA'), ('Masab Tank', 'MASAB_TANK'), ('Medchal Road', 'MEDCHAL_ROAD'), ('Miyapur', 'MIYAPUR'), ('Mokila', 'MOKILA'), ('Moosapet', 'MOOSAPET'), ('Nagole', 'NAGOLE'), ('Narayanguda', 'NARAYANGUDA'), ('Nizampet', 'NIZAMPET'), ('Patancheru', 'PATANCHERU'), ('Peerzadiguda', 'PEERZADIGUDA'), ('Q City', 'Q_CITY'), ('Sainikpuri', 'SAINIKPURI'), ('Sangareddy', 'SANGAREDDY'), ('Saroor Nagar', 'SAROOR_NAGAR'), ('Serilingampally', 'SERILINGAMPALLY'), ('Shamshabad', 'SHAMSHABAD'), ('Sivarampalli', 'SIVARAMPALLI'), ('Suraram', 'SURARAM'), ('Tarnaka', 'TARNAKA'), ('Toli Chowki', 'TOLI_CHOWKI'), ('Uppal', 'UPPAL'), ('Vanasthalipuram', 'VANASTHALIPURAM')], max_length=150)),
                ('city', models.CharField(choices=[('Hyderabad', 'HYDERABAD')], default='hyderabad', max_length=150)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='wallefy_backend.userprofile')),
            ],
        ),
        migrations.CreateModel(
            name='UserIncomeDetails',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('salary', models.DecimalField(decimal_places=2, max_digits=10)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='wallefy_backend.userprofile')),
            ],
        ),
        migrations.CreateModel(
            name='UserExpense',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('category', models.CharField(choices=[('Food', 'FOOD'), ('Entertainment', 'ENTERTAINMENT'), ('Travel', 'TRAVEL'), ('Health', 'HEALTH'), ('Miscellaneous', 'MISCELLANEOUS'), ('Rent', 'RENT'), ('Savings', 'SAVINGS'), ('Shopping', 'SHOPPING')], max_length=50)),
                ('description', models.TextField(blank=True, null=True)),
                ('expenses_amount', models.DecimalField(decimal_places=2, max_digits=10)),
                ('remaining_amount', models.DecimalField(decimal_places=2, max_digits=10)),
                ('total_expenses_amount', models.DecimalField(decimal_places=2, max_digits=10)),
                ('date', models.DateTimeField(auto_now=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='wallefy_backend.user')),
                ('user_income_details', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='wallefy_backend.userincomedetails')),
            ],
            options={
                'ordering': ['-date'],
            },
        ),
        migrations.CreateModel(
            name='UserLocationWisePreferences',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('location', models.CharField(choices=[('Hyderabad', 'HYDERABAD')], max_length=50)),
                ('high_percentage', models.FloatField(blank=True, null=True)),
                ('medium_percentage', models.FloatField(blank=True, null=True)),
                ('low_percentage', models.FloatField(blank=True, null=True)),
                ('category', models.CharField(choices=[('Food', 'FOOD'), ('Entertainment', 'ENTERTAINMENT'), ('Travel', 'TRAVEL'), ('Health', 'HEALTH'), ('Miscellaneous', 'MISCELLANEOUS'), ('Rent', 'RENT'), ('Savings', 'SAVINGS'), ('Shopping', 'SHOPPING')], max_length=50)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='wallefy_backend.userprofile')),
            ],
            options={
                'unique_together': {('location', 'category')},
            },
        ),
    ]
